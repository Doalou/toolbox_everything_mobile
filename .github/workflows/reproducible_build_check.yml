name: 🔍 Reproducible Build Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Vérification hebdomadaire (dimanche à 3h00 UTC)
    - cron: '0 3 * * 0'

jobs:
  reproducible_build_verification:
    name: Vérification des Builds Reproductibles
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: 📥 Checkout du code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Récupère l'historique complet pour GIT_COMMIT
    
    - name: ☕ Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: 🐦 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.5'
        channel: 'stable'
        cache: true
    
    - name: 📱 Setup Android NDK
      run: |
        echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/27.3.13750724" >> $GITHUB_ENV
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "ndk;27.3.13750724" || echo "NDK déjà installé"
    
    - name: 🔧 Configure l'environnement reproductible
      run: |
        echo "SOURCE_DATE_EPOCH=1704067200" >> $GITHUB_ENV
        echo "GIT_COMMIT=${{ github.sha }}" >> $GITHUB_ENV
        echo "TZ=UTC" >> $GITHUB_ENV
    
    - name: 📦 Cache des dépendances
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.pub-cache
        key: ${{ runner.os }}-build-cache-${{ hashFiles('**/pubspec.lock', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-build-cache-
    
    - name: 🏗️ Premier build reproductible
      run: |
        echo "🔨 Premier build en cours..."
        flutter clean
        flutter pub get
        flutter build apk --release --split-per-abi
        
        # Sauvegarde des artefacts
        mkdir -p reproducible_builds/build1
        cp build/app/outputs/flutter-apk/*.apk reproducible_builds/build1/
        
        # Calcul des checksums
        cd reproducible_builds/build1
        sha256sum *.apk > checksums_build1.txt
        echo "✅ Premier build terminé"
    
    - name: ⏱️ Pause entre les builds
      run: sleep 5
    
    - name: 🏗️ Deuxième build reproductible
      run: |
        echo "🔨 Deuxième build en cours..."
        flutter clean
        flutter pub get
        flutter build apk --release --split-per-abi
        
        # Sauvegarde des artefacts
        mkdir -p reproducible_builds/build2
        cp build/app/outputs/flutter-apk/*.apk reproducible_builds/build2/
        
        # Calcul des checksums
        cd reproducible_builds/build2
        sha256sum *.apk > checksums_build2.txt
        echo "✅ Deuxième build terminé"
    
    - name: 🔍 Vérification de la reproductibilité
      run: |
        
        echo "📊 Comparaison des builds..."
        echo "=========================="
        
        # Comparaison des checksums
        if diff -u reproducible_builds/build1/checksums_build1.txt reproducible_builds/build2/checksums_build2.txt; then
          echo "✅ SUCCÈS : Les builds sont identiques !"
          echo "🎉 Configuration reproductible validée."
          echo "reproducible=true" >> $GITHUB_OUTPUT
        else
          echo "❌ ÉCHEC : Les builds diffèrent"
          echo "Build 1 checksums:"
          cat reproducible_builds/build1/checksums_build1.txt
          echo ""
          echo "Build 2 checksums:"
          cat reproducible_builds/build2/checksums_build2.txt
          echo "reproducible=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Comparaison des tailles
        echo ""
        echo "📏 Comparaison des tailles :"
        echo "============================"
        for apk in reproducible_builds/build1/*.apk; do
          filename=$(basename "$apk")
          size1=$(stat -c%s "reproducible_builds/build1/$filename")
          size2=$(stat -c%s "reproducible_builds/build2/$filename")
          size_diff=$((size2 - size1))
          
          printf "📱 %-40s\n" "$filename"
          printf "   Build 1: %8.2f MB\n" "$(echo "scale=2; $size1/1024/1024" | bc)"
          printf "   Build 2: %8.2f MB\n" "$(echo "scale=2; $size2/1024/1024" | bc)"
          
          if [ $size_diff -eq 0 ]; then
            printf "   ✅ Identique (0 bytes de différence)\n"
          else
            printf "   ❌ Différence: %d bytes\n" $size_diff
          fi
          echo ""
        done
    
    - name: 📤 Upload des artefacts de comparaison
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: reproducible-builds-verification-${{ github.sha }}
        path: |
          reproducible_builds/
        retention-days: 7
    
    - name: 💬 Commentaire sur la PR (si échec)
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ❌ Échec de la vérification des Builds Reproductibles
            
            Les deux builds successifs ont produit des binaires différents. Cela peut indiquer :
            
            - 🕐 Des timestamps non fixes
            - 📁 Un ordre de fichiers non déterministe  
            - 🔧 Des variables d'environnement changeantes
            - 🎲 Une source de non-déterminisme dans le build
            
            Consultez les logs de l'action pour plus de détails et le guide \`docs/REPRODUCIBLE_BUILDS.md\`.
            
            **Artefacts disponibles** : Les APKs des deux builds sont disponibles dans les artefacts de cette action pour analyse manuelle.`
          })
    
    - name: ✅ Commentaire de succès sur la PR
      if: success() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ✅ Builds Reproductibles Validés !
            
            🎉 Les deux builds successifs ont produit des binaires **identiques**.
            
            Votre configuration garantit des builds reproductibles, ce qui renforce :
            - 🔒 La sécurité (vérification binaire/source)
            - 🐛 Le débogage (comparaisons fiables)
            - 📋 La conformité aux standards
            
            **Checksums identiques** ✓  
            **Tailles identiques** ✓  
            **Configuration déterministe** ✓`
          })
